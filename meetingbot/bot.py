#!/usr/bin/env python3
"""
MeetingBot - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á
–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
"""
import os
import time
import random
import signal
import sys
from datetime import datetime
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv
from connectors import ZoomConnector
from recorder import ScreenRecorder

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MEETING_URL = os.getenv("MEETING_URL", "https://www.google.com")
BOT_NAME = os.getenv("BOT_NAME", "MeetingBot")
HEADLESS = os.getenv("HEADLESS", "true").lower() == "true"
WINDOW_WIDTH = int(os.getenv("WINDOW_WIDTH", "1920"))
WINDOW_HEIGHT = int(os.getenv("WINDOW_HEIGHT", "1080"))
SCREENSHOT_DELAY = int(os.getenv("SCREENSHOT_DELAY", "3"))
CONNECTOR_TYPE = os.getenv("CONNECTOR_TYPE", "zoom").lower()
ENABLE_RECORDING = os.getenv("ENABLE_RECORDING", "false").lower() == "true"
MAX_MEETING_DURATION_SECONDS = int(os.getenv("MAX_MEETING_DURATION_SECONDS", "7200"))  # 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü—É—Ç–∏
BASE_DIR = Path(__file__).parent
SESSIONS_DIR = BASE_DIR / "sessions"
SESSIONS_DIR.mkdir(parents=True, exist_ok=True)


class MeetingBot:
    """–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á"""

    def __init__(self):
        self.driver = None
        self.connector = None
        self.recorder = None
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_dir = SESSIONS_DIR / self.session_id
        self.screenshots_dir = self.session_dir / "screenshots"
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)
        self.screenshot_counter = 0

    def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")

        chrome_options = Options()

        # –í–ê–ñ–ù–û: –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º headless
        # Chrome –¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –Ω–∞ Xvfb display –¥–ª—è –∑–∞–ø–∏—Å–∏ ffmpeg
        if HEADLESS and not ENABLE_RECORDING:
            chrome_options.add_argument("--headless=new")
            print("   –†–µ–∂–∏–º: headless (–±–µ–∑ GUI)")
        else:
            if ENABLE_RECORDING:
                print("   –†–µ–∂–∏–º: —Å GUI –Ω–∞ Xvfb (–¥–ª—è –∑–∞–ø–∏—Å–∏)")
            else:
                print("   –†–µ–∂–∏–º: —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞")

        # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument(f"--window-size={WINDOW_WIDTH},{WINDOW_HEIGHT}")
        chrome_options.add_argument("--disable-gpu")

        # –ê—É–¥–∏–æ –æ–ø—Ü–∏–∏ –¥–ª—è PulseAudio
        chrome_options.add_argument("--enable-audio-service-sandbox=false")
        chrome_options.add_argument("--autoplay-policy=no-user-gesture-required")

        # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –æ–ø—Ü–∏–∏
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")  # –°–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])  # –£–±—Ä–∞—Ç—å —Ñ–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        chrome_options.add_experimental_option('useAutomationExtension', False)  # –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent
        chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")

        # –û–ø—Ü–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á
        chrome_options.add_argument("--use-fake-ui-for-media-stream")  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ/–∫–∞–º–µ—Ä–µ
        chrome_options.add_argument("--use-fake-device-for-media-stream")  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        if CONNECTOR_TYPE == "zoom":
            self.connector = ZoomConnector(self.driver, BOT_NAME, self.take_screenshot)
            print(f"   –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä: {self.connector.get_platform_name()}")
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {CONNECTOR_TYPE}")

        # –£–¥–∞–ª–µ–Ω–∏–µ webdriver —Ñ–ª–∞–≥–∞ —á–µ—Ä–µ–∑ JavaScript
        self.driver.execute_cdp_cmd('Page.addScriptToEvaluateOnNewDocument', {
            'source': '''
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined
                });

                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤
                window.navigator.chrome = {
                    runtime: {}
                };

                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5]
                });

                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en', 'ru']
                });
            '''
        })

        print(f"   –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {WINDOW_WIDTH}x{WINDOW_HEIGHT}")
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    def take_screenshot(self, name=None):
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.screenshot_counter += 1

        if name is None:
            name = f"{self.screenshot_counter:02d}_screenshot.png"

        screenshot_path = self.screenshots_dir / name

        self.driver.save_screenshot(str(screenshot_path))
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç #{self.screenshot_counter} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")

        return screenshot_path

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å"""
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤—Å—Ç—Ä–µ—á–∏
        if self.connector and self.driver:
            print("\nüëã –í—ã—Ö–æ–∂—É –∏–∑ –≤—Å—Ç—Ä–µ—á–∏...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ driver –µ—â—ë –∂–∏–≤
                self.driver.current_url  # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ driver
                self.connector.leave_meeting()
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –≤—Å—Ç—Ä–µ—á–∏: {e}")
                print(f"   (Driver –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç)")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ü–ï–†–ï–î –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
        if self.recorder and self.recorder.is_recording():
            print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å...")
            self.recorder.stop()
            # –î–∞—ë–º ffmpeg –≤—Ä–µ–º—è –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            time.sleep(2)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if self.driver:
            print("\nüõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
            try:
                self.driver.quit()
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    def signal_handler(self, sig, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print(f"\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig} (Docker stop –∏–ª–∏ Ctrl+C)")
        print("üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.close()
        sys.exit(0)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, self.signal_handler)  # Docker stop
        signal.signal(signal.SIGINT, self.signal_handler)   # Ctrl+C

        try:
            print("="*60)
            print("ü§ñ MeetingBot –∑–∞–ø—É—â–µ–Ω")
            print(f"   Session ID: {self.session_id}")
            print("="*60)

            # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
            self.setup_browser()

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ —á–µ—Ä–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            success = self.connector.join_meeting(MEETING_URL)

            if not success:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ")
                return

            # –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if ENABLE_RECORDING:
                recording_path = self.session_dir / "recording.mp4"
                self.recorder = ScreenRecorder(
                    output_path=recording_path,
                    resolution=f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}"
                )
                if not self.recorder.start():
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë...")
                    self.recorder = None

            print("\n" + "="*60)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.screenshots_dir}")
            print("="*60)

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç—Ä–µ—á–∏
            print(f"\n‚è±Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç—Ä–µ—á–∏...")
            print(f"   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_MEETING_DURATION_SECONDS // 60} –º–∏–Ω—É—Ç ({MAX_MEETING_DURATION_SECONDS} —Å–µ–∫)")
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ Leave –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É")
            print(f"   üö™ –í—ã—Ö–æ–¥ –ø—Ä–∏: 1) –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, 2) –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ Leave")
            print(f"\n‚è∏Ô∏è  –ë–æ—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞...\n")

            start_time = time.time()
            check_counter = 0

            while True:
                elapsed_time = time.time() - start_time

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                if elapsed_time >= MAX_MEETING_DURATION_SECONDS:
                    elapsed_min = int(elapsed_time // 60)
                    print(f"\n\n‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ ({elapsed_min} –º–∏–Ω—É—Ç)")
                    print("   –ó–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é...")
                    self.close()
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö–Ω–æ–ø–∫–∞ Leave –∏—Å—á–µ–∑–ª–∞ (–ö–ê–ñ–î–£–Æ –°–ï–ö–£–ù–î–£)
                in_meeting = self.connector.check_in_meeting()

                elapsed_min = int(elapsed_time // 60)
                elapsed_sec = int(elapsed_time % 60)

                if not in_meeting:
                    print(f"\n\nüö™ –ö–Ω–æ–ø–∫–∞ Leave –∏—Å—á–µ–∑–ª–∞ (–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –±–æ—Ç –≤—ã–≥–Ω–∞–Ω)")
                    print(f"   –í—Ä–µ–º—è –≤ –≤—Å—Ç—Ä–µ—á–µ: {elapsed_min}–º {elapsed_sec}—Å")
                    print("   –ó–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é...")
                    self.close()
                    return

                # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if check_counter > 0 and check_counter % 60 == 0:
                    remaining_min = (MAX_MEETING_DURATION_SECONDS - elapsed_time) // 60
                    print(f"   ‚úÖ –í –≤—Å—Ç—Ä–µ—á–µ: {elapsed_min}–º {elapsed_sec}—Å | –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥–∞: ~{int(remaining_min)}–º")

                time.sleep(1)
                check_counter += 1

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

        finally:
            self.close()


if __name__ == "__main__":
    bot = MeetingBot()
    bot.run()
