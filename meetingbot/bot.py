#!/usr/bin/env python3
"""
MeetingBot - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á
–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
"""
import os
import time
import random
from datetime import datetime
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv
from connectors import ZoomConnector

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MEETING_URL = os.getenv("MEETING_URL", "https://www.google.com")
BOT_NAME = os.getenv("BOT_NAME", "MeetingBot")
HEADLESS = os.getenv("HEADLESS", "true").lower() == "true"
WINDOW_WIDTH = int(os.getenv("WINDOW_WIDTH", "1920"))
WINDOW_HEIGHT = int(os.getenv("WINDOW_HEIGHT", "1080"))
SCREENSHOT_DELAY = int(os.getenv("SCREENSHOT_DELAY", "3"))
CONNECTOR_TYPE = os.getenv("CONNECTOR_TYPE", "zoom").lower()

# –ü—É—Ç–∏
BASE_DIR = Path(__file__).parent
SESSIONS_DIR = BASE_DIR / "sessions"
SESSIONS_DIR.mkdir(parents=True, exist_ok=True)


class MeetingBot:
    """–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á"""

    def __init__(self):
        self.driver = None
        self.connector = None
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_dir = SESSIONS_DIR / self.session_id
        self.screenshots_dir = self.session_dir / "screenshots"
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)
        self.screenshot_counter = 0

    def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")

        chrome_options = Options()

        if HEADLESS:
            chrome_options.add_argument("--headless=new")
            print("   –†–µ–∂–∏–º: headless (–±–µ–∑ GUI)")
        else:
            print("   –†–µ–∂–∏–º: —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞")

        # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument(f"--window-size={WINDOW_WIDTH},{WINDOW_HEIGHT}")
        chrome_options.add_argument("--disable-gpu")

        # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –æ–ø—Ü–∏–∏
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")  # –°–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])  # –£–±—Ä–∞—Ç—å —Ñ–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        chrome_options.add_experimental_option('useAutomationExtension', False)  # –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent
        chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")

        # –û–ø—Ü–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á
        chrome_options.add_argument("--use-fake-ui-for-media-stream")  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ/–∫–∞–º–µ—Ä–µ
        chrome_options.add_argument("--use-fake-device-for-media-stream")  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        if CONNECTOR_TYPE == "zoom":
            self.connector = ZoomConnector(self.driver, BOT_NAME, self.take_screenshot)
            print(f"   –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä: {self.connector.get_platform_name()}")
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {CONNECTOR_TYPE}")

        # –£–¥–∞–ª–µ–Ω–∏–µ webdriver —Ñ–ª–∞–≥–∞ —á–µ—Ä–µ–∑ JavaScript
        self.driver.execute_cdp_cmd('Page.addScriptToEvaluateOnNewDocument', {
            'source': '''
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined
                });

                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤
                window.navigator.chrome = {
                    runtime: {}
                };

                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5]
                });

                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en', 'ru']
                });
            '''
        })

        print(f"   –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {WINDOW_WIDTH}x{WINDOW_HEIGHT}")
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    def take_screenshot(self, name=None):
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.screenshot_counter += 1

        if name is None:
            name = f"{self.screenshot_counter:02d}_screenshot.png"

        screenshot_path = self.screenshots_dir / name

        self.driver.save_screenshot(str(screenshot_path))
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç #{self.screenshot_counter} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")

        return screenshot_path

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            print("\nüõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
            self.driver.quit()
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞"""
        try:
            print("="*60)
            print("ü§ñ MeetingBot –∑–∞–ø—É—â–µ–Ω")
            print(f"   Session ID: {self.session_id}")
            print("="*60)

            # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
            self.setup_browser()

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ —á–µ—Ä–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            success = self.connector.join_meeting(MEETING_URL)

            if not success:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ")
                return

            print("\n" + "="*60)
            print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.screenshots_dir}")
            print("="*60)
            print("\n‚è∏Ô∏è  –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

            # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

        finally:
            self.close()


if __name__ == "__main__":
    bot = MeetingBot()
    bot.run()
