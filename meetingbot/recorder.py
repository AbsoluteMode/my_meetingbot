"""
Screen Recorder - –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ ffmpeg
"""
import subprocess
import time
from pathlib import Path


class ScreenRecorder:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ ffmpeg"""

    def __init__(self, output_path: Path, display=":99", resolution="1200x800", fps=15):
        """
        Args:
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
            display: DISPLAY –¥–ª—è X11 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é :99 –¥–ª—è Xvfb)
            resolution: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            fps: –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        """
        self.output_path = output_path
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        self.temp_path = output_path.parent / f"{output_path.stem}.tmp{output_path.suffix}"
        self.display = display
        self.resolution = resolution
        self.fps = fps
        self.process = None

    def start(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏"""
        print(f"üé¨ –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞...")
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {self.output_path.name}")
        print(f"   –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.temp_path.name}")
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {self.resolution}")
        print(f"   FPS: {self.fps}")

        # ffmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ X11 display + PulseAudio
        # –ü–ò–®–ï–ú –í–û –í–†–ï–ú–ï–ù–ù–´–ô –§–ê–ô–õ
        cmd = [
            "ffmpeg",
            "-f", "x11grab",
            "-video_size", self.resolution,
            "-framerate", str(self.fps),
            "-i", self.display,
            "-f", "pulse",
            "-i", "virtual_speaker.monitor",  # –ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            "-codec:v", "libx264",
            "-preset", "ultrafast",
            "-pix_fmt", "yuv420p",
            "-codec:a", "aac",
            "-b:a", "128k",
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            str(self.temp_path)  # –ü–∏—à–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ display –¥–æ—Å—Ç—É–ø–µ–Ω
        import subprocess as sp
        try:
            sp.run(["xdpyinfo", "-display", self.display],
                   check=True, capture_output=True, timeout=2)
        except (sp.CalledProcessError, FileNotFoundError, sp.TimeoutExpired):
            print(f"   ‚ùå Display {self.display} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Xvfb –∑–∞–ø—É—â–µ–Ω.")
            return False

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg —Å –≤—ã–≤–æ–¥–æ–º stderr –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE  # –û—Ç–¥–µ–ª—å–Ω—ã–π stderr
            )
            time.sleep(2)  # –î–∞—ë–º ffmpeg –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

            if self.process.poll() is not None:
                # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –æ—à–∏–±–∫–∞
                stdout, stderr = self.process.communicate()
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ffmpeg:")
                if stderr:
                    print(stderr.decode())
                if stdout:
                    print(stdout.decode())
                return False

            print(f"   ‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ (PID: {self.process.pid})")

            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞ ffmpeg –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            import select
            if select.select([self.process.stderr], [], [], 0.5)[0]:
                diagnostic = self.process.stderr.read(500).decode(errors='ignore')
                if 'pulse' in diagnostic.lower() or 'audio' in diagnostic.lower():
                    print(f"   üîç FFmpeg –∞—É–¥–∏–æ: {diagnostic[:200]}")

            return True

        except FileNotFoundError:
            print(f"   ‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg")
            return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if not self.process:
            print("‚ö†Ô∏è  –ó–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGINT (–∫–∞–∫ Ctrl+C) –¥–ª—è graceful shutdown
            import signal
            self.process.send_signal(signal.SIGINT)

            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥)
            try:
                self.process.wait(timeout=10)
                print(f"   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if self.temp_path.exists():
                    size_mb = self.temp_path.stat().st_size / (1024 * 1024)
                    print(f"   üìä –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")

                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
                    import shutil
                    shutil.move(str(self.temp_path), str(self.output_path))
                    print(f"   ‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤: {self.output_path.name}")

                return True
            except subprocess.TimeoutExpired:
                print(f"   ‚ö†Ô∏è  ffmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                self.process.kill()
                self.process.wait()

                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ kill
                if self.temp_path.exists():
                    import shutil
                    shutil.move(str(self.temp_path), str(self.output_path))
                    print(f"   ‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ø–æ—Å–ª–µ kill): {self.output_path.name}")

                return True

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False

    def is_recording(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥—ë—Ç –ª–∏ –∑–∞–ø–∏—Å—å"""
        return self.process is not None and self.process.poll() is None
